#!/usr/bin/env python3
# test_api.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API

import sys
from dotenv import load_dotenv
load_dotenv()

from config import TradingConfig
from bybit_api import BybitAPI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_bybit_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bybit API"""
    print("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø BYBIT API")
    print("=" * 50)
    
    config = TradingConfig()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if not config.BYBIT_API_KEY or not config.BYBIT_SECRET_KEY:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
        print("BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
        print("BYBIT_SECRET_KEY=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {config.BYBIT_API_KEY[:8]}...")
    
    api = BybitAPI(config)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    if not api.validate_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        return False
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
    test_symbols = ['BTCUSDT', 'ETHUSDT']
    
    for symbol in test_symbols:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}:")
        results = api.test_symbol_data(symbol)
        
        success_count = sum(results.values())
        total_tests = len(results)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if success_count == total_tests:
            print(f"‚úÖ {symbol} - –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            return True
        else:
            print(f"‚ö†Ô∏è {symbol} - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    
    return False

def test_specific_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîß –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("=" * 50)
    
    config = TradingConfig()
    api = BybitAPI(config)
    
    # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    print("\n‚è∞ –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞:")
    response = api._make_request("/v5/market/time")
    print(f"–û—Ç–≤–µ—Ç: {response}")
    
    # –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    print("\nüìã –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
    response = api._make_request("/v5/market/instruments-info", {
        "category": "linear",
        "limit": 5
    })
    
    if response.get('retCode') == 0:
        instruments = response.get('result', {}).get('list', [])
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        for inst in instruments[:3]:
            print(f"  - {inst.get('symbol')}: {inst.get('status')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response}")
    
    # –¢–µ—Å—Ç —Ç–∏–∫–µ—Ä–æ–≤
    print("\nüìà –¢–µ—Å—Ç —Ç–∏–∫–µ—Ä–æ–≤:")
    response = api._make_request("/v5/market/tickers", {
        "category": "linear",
        "symbol": "BTCUSDT"
    })
    
    if response.get('retCode') == 0:
        tickers = response.get('result', {}).get('list', [])
        if tickers:
            ticker = tickers[0]
            print(f"‚úÖ BTC —Ü–µ–Ω–∞: {ticker.get('lastPrice')}")
            print(f"  –û–±—ä–µ–º 24—á: {ticker.get('turnover24h')}")
        else:
            print("‚ùå –¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∏–∫–µ—Ä–∞: {response}")
    
    # –ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–≤–µ—á–µ–π
    print("\nüïØÔ∏è –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–í–ï–ß–ï–ô:")
    test_intervals = ['1', '60', 'D']  # 1 –º–∏–Ω—É—Ç–∞, 1 —á–∞—Å, 1 –¥–µ–Ω—å
    
    for interval in test_intervals:
        print(f"\n  –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")
        response = api._make_request("/v5/market/kline", {
            "category": "linear",
            "symbol": "BTCUSDT",
            "interval": interval,
            "limit": 5
        })
        
        if response.get('retCode') == 0:
            result = response.get('result', {})
            klines = result.get('list', [])
            print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {interval}")
            
            if klines:
                latest = klines[0]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞
                print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: –≤—Ä–µ–º—è={latest[0]}, —Ü–µ–Ω–∞={latest[4]}")
            else:
                print(f"  ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –ø—É—Å—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {interval}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {interval}: {response.get('retMsg')}")

def test_raw_requests():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüåê –¢–ï–°–¢ –ü–£–ë–õ–ò–ß–ù–´–• –≠–ù–î–ü–û–ò–ù–¢–û–í (–ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò)")
    print("=" * 50)
    
    import requests
    
    base_url = "https://api.bybit.com"
    
    # –ü—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    print("\n‚è∞ –ü—É–±–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:")
    try:
        response = requests.get(f"{base_url}/v5/market/time", timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {data}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –ü—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç–∏–∫–µ—Ä–∞
    print("\nüìà –ü—É–±–ª–∏—á–Ω—ã–π —Ç–∏–∫–µ—Ä BTC:")
    try:
        response = requests.get(f"{base_url}/v5/market/tickers?category=linear&symbol=BTCUSDT", timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            if data.get('retCode') == 0:
                tickers = data.get('result', {}).get('list', [])
                if tickers:
                    print(f"‚úÖ BTC —Ü–µ–Ω–∞: {tickers[0].get('lastPrice')}")
                else:
                    print("‚ùå –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤")
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {data}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –ü—É–±–ª–∏—á–Ω—ã–µ —Å–≤–µ—á–∏
    print("\nüïØÔ∏è –ü—É–±–ª–∏—á–Ω—ã–µ —Å–≤–µ—á–∏ BTC (1 —á–∞—Å):")
    try:
        response = requests.get(f"{base_url}/v5/market/kline?category=linear&symbol=BTCUSDT&interval=60&limit=5", timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            if data.get('retCode') == 0:
                klines = data.get('result', {}).get('list', [])
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π")
                if klines:
                    latest = klines[0]
                    print(f"  –ü–æ—Å–ª–µ–¥–Ω—è—è: –≤—Ä–µ–º—è={latest[0]}, open={latest[1]}, close={latest[4]}")
                else:
                    print("  ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –ø—É—Å—Ç")
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {data}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API BYBIT")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if test_bybit_api():
        print("\nüéâ –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° API")
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_specific_endpoints()
        
        # –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        test_raw_requests()
    
    print("\n" + "=" * 50)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")