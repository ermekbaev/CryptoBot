# enhanced_telegram_bot.py - –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
import asyncio
import aiohttp
import json
import logging
from typing import Dict, Optional, List, Set
from dataclasses import dataclass
from datetime import datetime, timedelta
from command_troubleshooting import CommandTroubleshooter
from config import TradingConfig
from technical_analysis import TechnicalAnalysisResult
from fundamental_analysis import FundamentalAnalysisResult

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    symbol: str
    signal_type: str  # 'BUY', 'SELL'
    entry_price: float
    stop_loss: float
    take_profit_1: float
    take_profit_2: Optional[float]
    leverage: int
    confidence: float
    risk_amount: float
    position_size: float
    technical_summary: str
    fundamental_summary: str
    risk_factors: list
    timestamp: datetime
    category: str = 'other'  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã

class EnhancedTelegramBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Telegram —á–∞—Ç—ã"""
    
    def __init__(self, config: TradingConfig):
        self.config = config
        self.base_url = f"https://api.telegram.org/bot{config.TELEGRAM_BOT_TOKEN}"
        self.last_signals = {}  # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —á–∞—Ç–∞–º
        self.daily_stats = {}   # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º
        
    async def send_trading_signal(self, signal: TradingSignal) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤–æ –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã"""
        results = {}
        authorized_chats = self.config.get_authorized_chats()
        
        if not authorized_chats:
            logger.warning("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
            return results
        
        for chat_id in authorized_chats:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —á–∞—Ç –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª
                can_receive, reason = self.config.can_receive_signal(chat_id, signal.category)
                
                if not can_receive:
                    logger.info(f"–ß–∞—Ç {chat_id} –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª {signal.symbol}: {reason}")
                    results[chat_id] = False
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if self._is_signal_duplicate(signal, chat_id):
                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    results[chat_id] = False
                    continue
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏
                message = self._format_signal_message(signal, chat_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await self._send_message(message, chat_id)
                results[chat_id] = success
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫—ç—à
                    self._cache_signal(signal, chat_id)
                    self.config.update_chat_signal_count(chat_id)
                    logger.info(f"–°–∏–≥–Ω–∞–ª {signal.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol} –≤ —á–∞—Ç {chat_id}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ —á–∞—Ç {chat_id}: {e}")
                results[chat_id] = False
        
        return results
    
    async def send_alert(self, message: str, priority: str = "INFO", 
                        admin_only: bool = False) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        results = {}
        
        try:
            emoji_map = {
                "INFO": "‚ÑπÔ∏è",
                "WARNING": "‚ö†Ô∏è", 
                "ERROR": "‚ùå",
                "SUCCESS": "‚úÖ"
            }
            
            formatted_message = f"{emoji_map.get(priority, '‚ÑπÔ∏è')} {message}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if admin_only:
                # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
                target_chats = [chat_id for chat_id, settings in self.config.CHAT_SUBSCRIPTIONS.items()
                              if settings.get('is_admin', False) and settings.get('active', False)]
            else:
                # –í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
                target_chats = self.config.get_authorized_chats()
            
            for chat_id in target_chats:
                success = await self._send_message(formatted_message, chat_id)
                results[chat_id] = success
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return results
    
    async def send_market_analysis(self, symbol: str, 
                                 technical_result: TechnicalAnalysisResult,
                                 fundamental_result: FundamentalAnalysisResult) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        results = {}
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            for chat_id in self.config.get_authorized_chats():
                chat_tier = self.config.get_chat_tier(chat_id)
                chat_features = self.config.SUBSCRIPTION_TIERS[chat_tier]['features']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É
                if 'technical_analysis' not in chat_features:
                    continue
                
                message = self._format_analysis_message(
                    symbol, technical_result, fundamental_result, chat_id
                )
                success = await self._send_message(message, chat_id)
                results[chat_id] = success
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        return results
    
    async def send_subscription_info(self, chat_id: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        try:
            if not self.config.is_chat_authorized(chat_id):
                message = """‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>

üîê –î–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

üíé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>
üÜì FREE - 3 —Å–∏–≥–Ω–∞–ª–∞/–¥–µ–Ω—å, —Ç–æ–ª—å–∫–æ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚≠ê BASIC - 10 —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å, DeFi + Layer 1
üíé PREMIUM - 25 —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å, –≤–∫–ª—é—á–∞—è Gaming/NFT
üëë VIP - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã, –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üìû –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
                return await self._send_message(message, chat_id)
            
            chat_settings = self.config.CHAT_SUBSCRIPTIONS[chat_id]
            tier = chat_settings['tier']
            tier_info = self.config.SUBSCRIPTION_TIERS[tier]
            
            # –°—á–µ—Ç—á–∏–∫–∏
            signals_today = chat_settings.get('signals_sent_today', 0)
            max_signals = tier_info['max_signals_per_day']
            max_signals_text = str(max_signals) if max_signals > 0 else "‚àû"
            
            message = f"""üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>

üë§ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {tier}
üìà <b>–°–∏–≥–Ω–∞–ª—ã —Å–µ–≥–æ–¥–Ω—è:</b> {signals_today}/{max_signals_text}
‚è±Ô∏è <b>–ö—É–ª–¥–∞—É–Ω:</b> {tier_info['cooldown_minutes']} –º–∏–Ω

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>"""
            
            category_names = {
                'major': 'üîµ –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
                'defi': 'üü£ DeFi —Ç–æ–∫–µ–Ω—ã', 
                'layer1': 'üü¢ Layer 1 –±–ª–æ–∫—á–µ–π–Ω—ã',
                'meme': 'üü° –ú–µ–º–∫–æ–∏–Ω—ã',
                'gaming_nft': 'üéÆ Gaming/NFT',
                'emerging': 'üÜï –ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã'
            }
            
            for category in tier_info['categories_allowed']:
                message += f"\n‚Ä¢ {category_names.get(category, category)}"
            
            message += f"""

üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>"""
            
            feature_names = {
                'basic_signals': 'üìä –ë–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã',
                'technical_analysis': 'üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
                'fundamental_analysis': 'üí∞ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
                'priority_support': 'üëë –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
            }
            
            for feature in tier_info['features']:
                message += f"\n‚Ä¢ {feature_names.get(feature, feature)}"
            
            if chat_settings.get('is_admin', False):
                message += f"\n\nüëë <b>–°—Ç–∞—Ç—É—Å:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            
            return await self._send_message(message, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
            return False
    
    async def handle_command(self, chat_id: str, command: str, args: List[str] = None) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if args is None:
            args = []
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥
            if command not in ['start', 'help'] and not self.config.is_chat_authorized(chat_id):
                return await self.send_subscription_info(chat_id)
            
            if command == 'start':
                message = """ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞!</b>

üéØ –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
/help - –ø–æ–º–æ—â—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
                
                return await self._send_message(message, chat_id)
            
            elif command == 'help':
                message = """‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìä <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–≥–Ω–∞–ª—ã:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é 20+ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –≠—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã
‚Ä¢ –í—Å–µ–≥–¥–∞ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∏—Å–∫–∞–º–∏
‚Ä¢ –ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª—å—à–µ —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å

üíé <b>–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–ø–∏—Å–æ–∫:</b>
üÜì FREE - –±–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚≠ê BASIC - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
üíé PREMIUM - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
üëë VIP - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"""
                
                return await self._send_message(message, chat_id)
            
            elif command == 'status':
                return await self.send_subscription_info(chat_id)
            
            elif command == 'stats':
                return await self._send_stats(chat_id)
            
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            elif command == 'admin' and self.config.CHAT_SUBSCRIPTIONS.get(chat_id, {}).get('is_admin', False):
                return await self._handle_admin_command(chat_id, args)
            
            else:
                message = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
                return await self._send_message(message, chat_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            return False
    
    async def _send_stats(self, chat_id: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            chat_settings = self.config.CHAT_SUBSCRIPTIONS.get(chat_id, {})
            signals_today = chat_settings.get('signals_sent_today', 0)
            tier = chat_settings.get('tier', 'FREE')
            
            message = f"""üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤</b>

üìä <b>–°–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–µ–Ω–æ:</b> {signals_today}
üéØ <b>–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> {tier}

‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:</b>"""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            chat_signals = []
            for key, signal_data in self.last_signals.items():
                if key.endswith(f"_{chat_id}"):
                    chat_signals.append(signal_data)
            
            chat_signals = sorted(chat_signals, key=lambda x: x['timestamp'], reverse=True)[:5]
            
            if chat_signals:
                for signal in chat_signals:
                    symbol = signal['symbol']
                    signal_type = signal['signal_type']
                    confidence = signal['confidence']
                    time_str = signal['timestamp'].strftime('%H:%M')
                    message += f"\n‚Ä¢ {time_str} - {symbol} {signal_type} ({confidence:.0f}%)"
            else:
                message += "\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤"
            
            return await self._send_message(message, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    # ===============================================
    # –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ (–î–û–ü–ò–°–ê–ù–û)
    # ===============================================
    
    async def _handle_admin_command(self, chat_id: str, args: List[str]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
        
        if not self.config.CHAT_SUBSCRIPTIONS.get(chat_id, {}).get('is_admin', False):
            await self._send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", chat_id)
            return False
        
        if not args:
            await self._send_admin_help(chat_id)
            return True
        
        admin_command = args[0].lower()
        admin_args = args[1:] if len(args) > 1 else []
        
        logger.info(f"–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {chat_id}: {admin_command} {admin_args}")
        
        # –†–æ—É—Ç–∏–Ω–≥ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        if admin_command == 'add_chat':
            return await self._admin_add_chat(chat_id, admin_args)
        elif admin_command == 'remove_chat':
            return await self._admin_remove_chat(chat_id, admin_args)
        elif admin_command == 'upgrade_chat':
            return await self._admin_upgrade_chat(chat_id, admin_args)
        elif admin_command == 'list_chats':
            return await self._admin_list_chats(chat_id, admin_args)
        elif admin_command == 'broadcast':
            return await self._admin_broadcast(chat_id, admin_args)
        elif admin_command == 'diagnose':
            return await self._admin_diagnose(chat_id, admin_args)
        elif admin_command == 'test_bot':
            return await self._admin_test_bot(chat_id, admin_args)
        elif admin_command == 'help':
            return await self._send_admin_help(chat_id)
        else:
            await self._send_message(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: {admin_command}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin help", chat_id)
            return False
    
    async def _admin_add_chat(self, admin_chat: str, args: List[str]) -> bool: # type: ignore
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        
        if len(args) < 2:
            help_text = """üí° <b>–ö–æ–º–∞–Ω–¥–∞: /admin add_chat</b>

üìù <b>–§–æ—Ä–º–∞—Ç:</b>
<code>/admin add_chat CHAT_ID TIER [NOTES]</code>

üéØ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ <code>CHAT_ID</code> - ID —á–∞—Ç–∞ (—á–∏—Å–ª–æ)
‚Ä¢ <code>TIER</code> - –£—Ä–æ–≤–µ–Ω—å (FREE/BASIC/PREMIUM/VIP)
‚Ä¢ <code>NOTES</code> - –ó–∞–º–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

üìã <b>–ü—Ä–∏–º–µ—Ä:</b>
<code>/admin add_chat 1857921803 BASIC –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</code>"""
            
            await self._send_message(help_text, admin_chat)
            return False
        
        target_chat = args[0].strip()
        tier = args[1].upper().strip()
        notes = " ".join(args[2:]) if len(args) > 2 else ""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è chat_id
        try:
            validated_chat_id = str(int(target_chat))
        except ValueError:
            await self._send_message(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID: {target_chat}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID", admin_chat)
            return False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞
        if tier not in self.config.SUBSCRIPTION_TIERS:
            available_tiers = ", ".join(self.config.SUBSCRIPTION_TIERS.keys())
            await self._send_message(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {tier}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã: {available_tiers}", admin_chat)
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
        if validated_chat_id in self.config.CHAT_SUBSCRIPTIONS:
            current_tier = self.config.CHAT_SUBSCRIPTIONS[validated_chat_id]['tier']
            await self._send_message(
                f"‚ö†Ô∏è –ß–∞—Ç {validated_chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ç–∞—Ä–∏—Ñ–æ–º {current_tier}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin upgrade_chat –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞", 
                admin_chat
            )
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç
        try:
            success = self.config.add_chat(validated_chat_id, tier, is_admin=False)
            
            if success:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.config.CHAT_SUBSCRIPTIONS[validated_chat_id].update({
                    'admin_notes': notes,
                    'added_by': admin_chat,
                    'added_at': datetime.now().isoformat()
                })
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                tier_info = self.config.SUBSCRIPTION_TIERS[tier]
                success_message = f"""‚úÖ <b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>

        üë§ <b>Chat ID:</b> <code>{validated_chat_id}</code>
        üíé <b>–¢–∞—Ä–∏—Ñ:</b> {tier}
        üìä <b>–õ–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤:</b> {tier_info['max_signals_per_day'] if tier_info['max_signals_per_day'] > 0 else '‚àû'}/–¥–µ–Ω—å
        ‚è±Ô∏è <b>–ö—É–ª–¥–∞—É–Ω:</b> {tier_info['cooldown_minutes']} –º–∏–Ω
        üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {notes or '–ù–µ—Ç'}
        üïê <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
        üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_chat}
        üí° <b>–û—Å—Ç–∞–ª–æ—Å—å —á–∞—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:</b> {len(self.config.CHAT_SUBSCRIPTIONS)}"""
                
                await self._send_message(success_message, admin_chat)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ —É–¥–∞–ª–µ–Ω–∏–µ?)
                try:
                    welcome_message = """üëã <b>–í—ã –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É –±–æ—Ç—É</b>

        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
        üìà –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.
        """
                    await self._send_message(welcome_message, validated_chat_id)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {validated_chat_id}: {e}")
                
                logger.info(f"–ê–¥–º–∏–Ω {admin_chat} –¥–æ–±–∞–≤–∏–ª —á–∞—Ç {validated_chat_id}")
                return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
            await self._send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞.", admin_chat)
            return False

    async def _admin_broadcast(self, admin_chat: str, args: List[str]) -> bool:
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        
        if len(args) < 1:
            await self._send_message(
                "üìù –§–æ—Ä–º–∞—Ç: /admin broadcast –°–û–û–ë–©–ï–ù–ò–ï\n"
                "–ü—Ä–∏–º–µ—Ä: /admin broadcast –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", 
                admin_chat
            )
            return False
        
        broadcast_message = " ".join(args)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        confirmation_text = f"""üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{broadcast_message}

üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {len(self.config.get_authorized_chats())} —á–∞—Ç–æ–≤

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º 'confirm' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
<code>/admin broadcast confirm {broadcast_message}</code>"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if args[0].lower() != 'confirm':
            await self._send_message(confirmation_text, admin_chat)
            return False
        
        # –£–±–∏—Ä–∞–µ–º 'confirm' –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        actual_message = " ".join(args[1:])
        
        if not actual_message.strip():
            await self._send_message("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", admin_chat)
            return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        formatted_message = f"""üì¢ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>

{actual_message}

<i>‚Äî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞</i>"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
        results = {}
        authorized_chats = self.config.get_authorized_chats()
        
        for chat_id in authorized_chats:
            try:
                success = await self._send_message(formatted_message, chat_id)
                results[chat_id] = success
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                results[chat_id] = False
        
        # –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        success_count = sum(results.values())
        total_count = len(results)
        failed_chats = [chat_id for chat_id, success in results.items() if not success]
        
        report = f"""üìä <b>–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ</b>

‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> {success_count}/{total_count} —á–∞—Ç–æ–≤
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"""
        
        if failed_chats:
            report += f"\n\n‚ùå <b>–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ({len(failed_chats)}):</b>"
            for chat_id in failed_chats[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                report += f"\n‚Ä¢ <code>{chat_id}</code>"
            if len(failed_chats) > 5:
                report += f"\n... –∏ –µ—â–µ {len(failed_chats) - 5}"
        
        await self._send_message(report, admin_chat)
        logger.info(f"–ê–¥–º–∏–Ω {admin_chat} –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: {success_count}/{total_count} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
        
        return True
    
    async def _admin_diagnose(self, admin_chat: str, args: List[str]) -> bool:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        
        if len(args) < 3:
            await self._send_message(
                "üìù –§–æ—Ä–º–∞—Ç: /admin diagnose add_chat CHAT_ID TIER\n"
                "–ü—Ä–∏–º–µ—Ä: /admin diagnose add_chat 1857921803 BASIC", 
                admin_chat
            )
            return False
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        full_command = f"/admin {' '.join(args)}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        troubleshooter = CommandTroubleshooter(self.config, self)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        await troubleshooter.diagnose_add_chat_command(admin_chat, full_command)
        
        return True
    
    async def _admin_test_bot(self, admin_chat: str, args: List[str]) -> bool:
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        
        troubleshooter = CommandTroubleshooter(self.config, self)
        await troubleshooter.test_bot_responsiveness(admin_chat)
        
        return True
    
    async def _send_admin_help(self, chat_id: str) -> bool:
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
        
        help_text = """üëë <b>–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´</b>

üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏:</b>
/admin add_chat CHAT_ID TIER [NOTES] - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
/admin remove_chat CHAT_ID - —É–¥–∞–ª–∏—Ç—å —á–∞—Ç  
/admin upgrade_chat CHAT_ID TIER - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ
/admin list_chats - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤

üîß <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</b>
/admin test_bot - —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/admin diagnose add_chat CHAT_ID TIER - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã

üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞:</b>
/admin broadcast MESSAGE - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ –≤—Å–µ —á–∞—Ç—ã

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>
üÜì FREE, ‚≠ê BASIC, üíé PREMIUM, üëë VIP

üõ†Ô∏è <b>–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin test_bot –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin diagnose add_chat –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞

üìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/admin add_chat 1857921803 BASIC –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</code>
<code>/admin test_bot</code>
<code>/admin diagnose add_chat 1857921803 BASIC</code>
<code>/admin broadcast confirm –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</code>"""
        
        await self._send_message(help_text, chat_id)
        return True
    
    # ===============================================
    # –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
    # ===============================================
    
    def _format_signal_message(self, signal: TradingSignal, chat_id: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        
        tier = self.config.get_chat_tier(chat_id)
        tier_features = self.config.SUBSCRIPTION_TIERS[tier]['features']
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
        signal_emoji = "üü¢" if signal.signal_type == "BUY" else "üî¥"
        confidence_emoji = self._get_confidence_emoji(signal.confidence)
        
        message = f"""ü§ñ <b>–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ</b> {signal_emoji}

üìä <b>–ü–∞—Ä–∞:</b> {signal.symbol}
üéØ <b>–¢–∏–ø:</b> {signal.signal_type}
üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {signal.entry_price:.6f}"""

        # –î–ª—è FREE –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if tier == 'FREE':
            message += f"""
üõ°Ô∏è <b>Stop Loss:</b> {signal.stop_loss:.6f}
üéØ <b>Take Profit:</b> {signal.take_profit_1:.6f}

{confidence_emoji} <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence:.1f}%

‚è∞ {signal.timestamp.strftime('%H:%M:%S')}

<i>‚≠ê –ü–æ–ª—É—á–∏—Ç–µ BASIC –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!</i>"""
            
        else:
            # –î–ª—è BASIC –∏ –≤—ã—à–µ - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            message += f"""
üìà <b>–ü–ª–µ—á–æ:</b> {signal.leverage}x
üíµ <b>–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:</b> ${signal.position_size:.2f}

üõ°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:</b>
‚õî Stop Loss: {signal.stop_loss:.6f}
üéØ Take Profit 1: {signal.take_profit_1:.6f}"""

            if signal.take_profit_2:
                message += f"\nüéØ Take Profit 2: {signal.take_profit_2:.6f}"
            
            message += f"""

{confidence_emoji} <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence:.1f}%
üíé <b>–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É:</b> ${signal.risk_amount:.2f}"""

            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è BASIC+
            if 'technical_analysis' in tier_features:
                message += f"""

üìà <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</b>
{signal.technical_summary}"""
            
            # –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è PREMIUM+
            if 'fundamental_analysis' in tier_features:
                message += f"""

üìä <b>–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b>
{signal.fundamental_summary}"""
                
                if signal.risk_factors:
                    message += f"\n\n‚ö†Ô∏è <b>–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:</b>\n"
                    for risk in signal.risk_factors[:3]:
                        message += f"‚Ä¢ {risk}\n"
            
            message += f"""

‚è∞ <b>–í—Ä–µ–º—è:</b> {signal.timestamp.strftime('%H:%M:%S %d.%m.%Y')}"""
        
        message += "\n\n<i>‚ö†Ô∏è –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π!</i>"
        
        return message
    
    def _format_analysis_message(self, symbol: str,
                               technical_result: TechnicalAnalysisResult,
                               fundamental_result: FundamentalAnalysisResult,
                               chat_id: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        
        tier = self.config.get_chat_tier(chat_id)
        
        message = f"""üìä <b>–ê–ù–ê–õ–ò–ó: {symbol}</b>

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</b>
‚Ä¢ –°–∏–≥–Ω–∞–ª: {technical_result.overall_signal}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {technical_result.confidence:.1f}%"""

        if tier in ['PREMIUM', 'VIP']:
            message += f"""

üìà <b>–ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏:</b>"""
            
            if technical_result.support_levels:
                message += f"\nüü¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {', '.join([f'{level:.6f}' for level in technical_result.support_levels[:2]])}"
            
            if technical_result.resistance_levels:
                message += f"\nüî¥ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {', '.join([f'{level:.6f}' for level in technical_result.resistance_levels[:2]])}"
            
            message += f"""

üí° <b>–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b>
‚Ä¢ –°–∏–≥–Ω–∞–ª: {fundamental_result.overall_signal}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {fundamental_result.confidence:.1f}%
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {fundamental_result.market_sentiment}"""
        
        if tier == 'VIP':
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è VIP
            strong_signals = sorted(
                [s for s in technical_result.signals if s.strength > 0.5],
                key=lambda x: x.strength, reverse=True
            )[:3]
            
            if strong_signals:
                message += f"\n\nüìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>"
                for signal in strong_signals:
                    message += f"\n‚Ä¢ {signal.name}: {signal.signal} ({signal.strength:.2f})"
        
        message += f"\n\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        
        return message
    
    def _get_confidence_emoji(self, confidence: float) -> str:
        """–≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if confidence >= 85:
            return "üî•"
        elif confidence >= 75:
            return "üíé"
        elif confidence >= 65:
            return "‚≠ê"
        else:
            return "‚ö°"
    
    # ===============================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ===============================================
    
    async def _send_message(self, message: str, chat_id: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç"""
        try:
            url = f"{self.base_url}/sendMessage"
            
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è —á–∞—Ç–∞ {chat_id}: {response.status} - {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            return False
    
    def _is_signal_duplicate(self, signal: TradingSignal, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è —á–∞—Ç–∞"""
        key = f"{signal.symbol}_{signal.signal_type}_{chat_id}"
        
        if key in self.last_signals:
            last_time = self.last_signals[key]['timestamp']
            cooldown_minutes = self.config.get_cooldown_minutes(chat_id)
            cooldown = timedelta(minutes=cooldown_minutes)
            
            if datetime.now() - last_time < cooldown:
                return True
        
        return False
    
    def _cache_signal(self, signal: TradingSignal, chat_id: str):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —á–∞—Ç–∞"""
        key = f"{signal.symbol}_{signal.signal_type}_{chat_id}"
        self.last_signals[key] = {
            'timestamp': signal.timestamp,
            'confidence': signal.confidence,
            'symbol': signal.symbol,
            'signal_type': signal.signal_type
        }
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        cutoff_time = datetime.now() - timedelta(hours=24)
        self.last_signals = {
            k: v for k, v in self.last_signals.items() 
            if v['timestamp'] > cutoff_time
        }
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        try:
            results = await self.send_alert("ü§ñ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - OK!", "SUCCESS")
            success_count = sum(results.values())
            total_count = len(results)
            
            logger.info(f"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {success_count}/{total_count} —á–∞—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
            return False

