# enhanced_persistent_config_system.py - –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import json
import os
import logging
from typing import Dict, List, Optional
from datetime import datetime
import asyncio
from pathlib import Path
import shutil

logger = logging.getLogger(__name__)

class PersistentConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    
    def __init__(self, config_file: str = "chat_subscriptions.json"):
        self.config_file = Path(config_file)
        self.backup_dir = Path("config_backups")
        self.backup_dir.mkdir(exist_ok=True)
        
    def save_subscriptions(self, subscriptions: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            if self.config_file.exists():
                backup_name = f"chat_subscriptions_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                backup_path = self.backup_dir / backup_name
                shutil.copy2(self.config_file, backup_path)
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—ç–∫–∞–ø–æ–≤
                self._cleanup_backups()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_data = {
                'last_updated': datetime.now().isoformat(),
                'version': '2.0',  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                'subscriptions': subscriptions
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_file}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def load_subscriptions(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not self.config_file.exists():
                logger.info("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                return {}
            
            with open(self.config_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            if 'subscriptions' in data:
                subscriptions = data['subscriptions']
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞")
                return subscriptions
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
                logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return data if isinstance(data, dict) else {}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def _cleanup_backups(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
        try:
            backup_files = list(self.backup_dir.glob("chat_subscriptions_backup_*.json"))
            backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 10
            for backup_file in backup_files[10:]:
                backup_file.unlink()
                logger.debug(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup_file}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤: {e}")

class EnhancedTradingConfig:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º - –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.BYBIT_API_KEY = os.getenv('BYBIT_API_KEY', '')
        self.BYBIT_SECRET_KEY = os.getenv('BYBIT_SECRET_KEY', '')
        self.TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_TOKEN', '')
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.config_manager = PersistentConfigManager()
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        test_mode = os.getenv('TEST_MODE', 'False').lower() == 'true'
        
        if test_mode:
            logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –°–Ω–∏–∂–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
            self.MIN_CONFIDENCE_LEVEL = float(os.getenv('MIN_CONFIDENCE_LEVEL', '45.0'))  # –°–Ω–∏–∂–µ–Ω–æ —Å 75
            self.MAX_RISK_PER_TRADE = float(os.getenv('MAX_RISK_PER_TRADE', '3.0'))      # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 2
            self.MIN_VOLUME_USDT = float(os.getenv('MIN_VOLUME_USDT', '10000000'))       # 10M –≤–º–µ—Å—Ç–æ 100M
        else:
            self.MIN_CONFIDENCE_LEVEL = float(os.getenv('MIN_CONFIDENCE_LEVEL', '70.0'))
            self.MAX_RISK_PER_TRADE = float(os.getenv('MAX_RISK_PER_TRADE', '2.0'))
            self.MIN_VOLUME_USDT = float(os.getenv('MIN_VOLUME_USDT', '50000000'))       # 50M –≤–º–µ—Å—Ç–æ 100M
        
        self.MAX_LEVERAGE = int(os.getenv('MAX_LEVERAGE', '5'))
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.RSI_PERIOD = 14
        self.MACD_FAST = 12
        self.MACD_SLOW = 26
        self.MACD_SIGNAL = 9
        self.BB_PERIOD = 20
        self.BB_STD = 2.0
        self.EMA_PERIODS = [9, 21, 50, 100, 200]
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.ANALYSIS_TIMEFRAMES = ['1h', '4h', '1d']
        self.PRIMARY_TIMEFRAME = os.getenv('PRIMARY_TIMEFRAME', '4h')
        
        # –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–ª—É—á—à–µ–µ –∏–∑ –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏–π)
        trading_pairs_env = os.getenv('TRADING_PAIRS', '')
        if trading_pairs_env:
            self.TRADING_PAIRS = [pair.strip() for pair in trading_pairs_env.split(',')]
        else:
            self.TRADING_PAIRS = [
                # ===== –¢–û–ü –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–µ–º) =====
                'BTCUSDT',      # Bitcoin - —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–æ–ª–æ—Ç–æ
                'ETHUSDT',      # Ethereum - –ª–∏–¥–µ—Ä —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                'BNBUSDT',      # Binance Coin - –±–∏—Ä–∂–µ–≤–æ–π —Ç–æ–∫–µ–Ω #1
                'XRPUSDT',      # Ripple - –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
                'ADAUSDT',      # Cardano - –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
                'SOLUSDT',      # Solana - –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                
                # ===== DEFI –õ–ò–î–ï–†–´ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫) =====
                'LINKUSDT',     # Chainlink - –æ—Ä–∞–∫—É–ª—ã ‚Ññ1
                'UNIUSDT',      # Uniswap - –≤–µ–¥—É—â–∏–π DEX
                'AAVEUSDT',     # Aave - –ª–∏–¥–µ—Ä DeFi –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è
                'MKRUSDT',      # Maker - —Å–æ–∑–¥–∞—Ç–µ–ª—å DAI
                'CRVUSDT',      # Curve - —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                'SUSHIUSDT',    # SushiSwap - –º—É–ª—å—Ç–∏—á–µ–π–Ω DEX
                'GRTUSDT',      # The Graph - Web3 –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                'COMPUSDT',     # Compound - –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ  
                'SNXUSDT',      # Synthetix - —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤—ã
                'YFIUSDT',      # Yearn Finance - yield –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                '1INCHUSDT',    # 1inch - DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä

                # ===== LAYER 1 –ë–õ–û–ö–ß–ï–ô–ù–´ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫) =====
                'DOTUSDT',      # Polkadot - –ø–∞—Ä–∞—á–µ–π–Ω—ã
                'AVAXUSDT',     # Avalanche - –±—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                'MATICUSDT',    # Polygon - L2 –¥–ª—è Ethereum
                'ATOMUSDT',     # Cosmos - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–ª–æ–∫—á–µ–π–Ω–æ–≤
                'NEARUSDT',     # Near Protocol - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è —Å–µ—Ç—å
                'FTMUSDT',      # Fantom - DAG –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
                'APTUSDT',      # Aptos - –Ω–æ–≤—ã–π Layer 1
                'SUIUSDT',      # Sui - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
                'XTZUSDT',      # Tezos - —Å–∞–º–æ–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —Å–µ—Ç—å
                'ALGOUSDT',     # Algorand - —á–∏—Å—Ç—ã–π PoS
                'TRXUSDT',      # Tron - –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
                'EOSUSDT',      # EOS - —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                'THETAUSDT',    # Theta - –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥

                # ===== –ú–ï–ú–ö–û–ò–ù–´ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ) =====
                'DOGEUSDT',     # Dogecoin - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ–º
                'SHIBUSDT',     # Shiba Inu - —É–±–∏–π—Ü–∞ Doge
                'PEPEUSDT',     # Pepe - –º–µ–º 2023
                '1000PEPEUSDT', # Pepe –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                'FLOKIUSDT',    # Floki - –º–µ–º —Å —É—Ç–∏–ª–∏—Ç–æ–π

                # ===== GAMING/NFT –¢–û–ö–ï–ù–´ =====
                'APEUSDT',      # ApeCoin - Bored Apes
                'SANDUSDT',     # The Sandbox - –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è
                'MANAUSDT',     # Decentraland - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∏—Ä
                'GALAUSDT',     # Gala Games - –∏–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
                'ENJUSDT',      # Enjin - NFT –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
                'CHZUSDT',      # Chiliz - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                'AXSUSDT',      # Axie Infinity - –∏–≥—Ä–∞

                # ===== –ù–û–í–´–ï –ü–†–û–ï–ö–¢–´ =====
                'CETUSUSDT',    # Cetus - DeFi –Ω–∞ Sui
                'SLERFUSDT',    # Slerf - –Ω–æ–≤—ã–π –º–µ–º
                'SXTUSDT',      # Space and Time - –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ë–î
                'AUCTIONUSDT',  # Bounce - –∞—É–∫—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
                'TIAUSDT',      # Celestia - –º–æ–¥—É–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
                'FLMUSDT',      # Flamingo - –∫—Ä–æ—Å—Å-—á–µ–π–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª

                # ===== –¢–†–ê–î–ò–¶–ò–û–ù–ù–´–ï –ê–õ–¨–¢–ö–û–ò–ù–´ =====
                'LTCUSDT',      # Litecoin - —Ü–∏—Ñ—Ä–æ–≤–æ–µ —Å–µ—Ä–µ–±—Ä–æ
                'BCHUSDT',      # Bitcoin Cash - –±—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                'ETCUSDT',      # Ethereum Classic - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ETH
                'XLMUSDT',      # Stellar - —Ç—Ä–∞–Ω—Å–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                'VETUSDT',      # VeChain - supply chain
                'ICPUSDT',      # Internet Computer - –≤–µ–±3 –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                'FILUSDT',      # Filecoin - –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
                'INJUSDT',      # Injective - –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã
                'RUNEUSDT',     # THORChain - –∫—Ä–æ—Å—Å-—á–µ–π–Ω DEX
                'LDOUSDT',      # Lido DAO - liquid staking
                'ARBUSDT',      # Arbitrum - L2 —Ä–µ—à–µ–Ω–∏–µ
                'OPUSDT',       # Optimism - L2 —Ä–µ—à–µ–Ω–∏–µ
            ]
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è)
        self.PAIR_CATEGORIES = {
            'major': [
                'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'XRPUSDT', 'ADAUSDT', 'SOLUSDT'
            ],
            'defi': [
                'LINKUSDT', 'UNIUSDT', 'AAVEUSDT', 'MKRUSDT', 'SUSHIUSDT', 'CRVUSDT', 
                'GRTUSDT', 'COMPUSDT', 'SNXUSDT', 'YFIUSDT', '1INCHUSDT'
            ],
            'layer1': [
                'DOTUSDT', 'AVAXUSDT', 'MATICUSDT', 'FTMUSDT', 'ATOMUSDT', 'NEARUSDT',
                'APTUSDT', 'SUIUSDT', 'ALGOUSDT', 'TRXUSDT', 'EOSUSDT', 'THETAUSDT',
                'XTZUSDT'
            ],
            'meme': [
                'DOGEUSDT', 'SHIBUSDT', 'PEPEUSDT', '1000PEPEUSDT', 'FLOKIUSDT'
            ],
            'gaming_nft': [
                'APEUSDT', 'SANDUSDT', 'MANAUSDT', 'GALAUSDT', 'ENJUSDT', 'CHZUSDT', 'AXSUSDT'
            ],
            'emerging': [
                'CETUSUSDT', 'SLERFUSDT', 'SXTUSDT', 'AUCTIONUSDT', 'TIAUSDT', 'FLMUSDT'
            ],
            'altcoins': [
                'LTCUSDT', 'BCHUSDT', 'ETCUSDT', 'XLMUSDT', 'VETUSDT', 'ICPUSDT',
                'FILUSDT', 'INJUSDT', 'RUNEUSDT', 'LDOUSDT', 'ARBUSDT', 'OPUSDT'
            ]
        }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã (—Å–Ω–∏–∂–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤)
        if test_mode:
            logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–µ–Ω—ã")
            self.MIN_VOLUMES_BY_CATEGORY = {
                'major': 100000000,     # 100M –≤–º–µ—Å—Ç–æ 1B
                'defi': 25000000,       # 25M –≤–º–µ—Å—Ç–æ 150M
                'layer1': 50000000,     # 50M –≤–º–µ—Å—Ç–æ 200M
                'meme': 15000000,       # 15M –≤–º–µ—Å—Ç–æ 50M
                'gaming_nft': 10000000, # 10M –≤–º–µ—Å—Ç–æ 30M
                'emerging': 5000000,    # 5M –≤–º–µ—Å—Ç–æ 10M
                'altcoins': 20000000    # 20M –≤–º–µ—Å—Ç–æ 50M
            }
        else:
            logger.info("üéØ –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–º—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            self.MIN_VOLUMES_BY_CATEGORY = {
                'major': 100000000,     # 500M –≤–º–µ—Å—Ç–æ 1B (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
                'defi': 20000000,       # 75M –≤–º–µ—Å—Ç–æ 150M (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
                'layer1': 30000000,    # 100M –≤–º–µ—Å—Ç–æ 200M (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
                'meme': 10000000,       # 25M –≤–º–µ—Å—Ç–æ 50M (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
                'gaming_nft': 5000000, # 15M –≤–º–µ—Å—Ç–æ 30M (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
                'emerging': 3000000,    # 5M –≤–º–µ—Å—Ç–æ 10M (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
                'altcoins': 10000000    # 25M –≤–º–µ—Å—Ç–æ 50M (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
            }
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è)
        self.SUBSCRIPTION_TIERS = {
            'FREE': {
                'max_signals_per_day': 5,           # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 3 –¥–æ 5
                'categories_allowed': ['major'],
                'features': ['basic_signals'],
                'cooldown_minutes': 90              # –°–Ω–∏–∂–µ–Ω–æ —Å–æ 120 –¥–æ 90
            },
            'BASIC': {
                'max_signals_per_day': 15,          # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 10 –¥–æ 15
                'categories_allowed': ['major', 'defi', 'layer1', 'altcoins'],  # –î–æ–±–∞–≤–ª–µ–Ω—ã altcoins
                'features': ['basic_signals', 'technical_analysis'],
                'cooldown_minutes': 45              # –°–Ω–∏–∂–µ–Ω–æ —Å 60 –¥–æ 45
            },
            'PREMIUM': {
                'max_signals_per_day': 30,          # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 25 –¥–æ 30
                'categories_allowed': ['major', 'defi', 'layer1', 'gaming_nft', 'altcoins'],
                'features': ['basic_signals', 'technical_analysis', 'fundamental_analysis'],
                'cooldown_minutes': 20              # –°–Ω–∏–∂–µ–Ω–æ —Å 30 –¥–æ 20
            },
            'VIP': {
                'max_signals_per_day': -1,          # –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ
                'categories_allowed': ['major', 'defi', 'layer1', 'meme', 'gaming_nft', 'emerging', 'altcoins'],
                'features': ['basic_signals', 'technical_analysis', 'fundamental_analysis', 'priority_support'],
                'cooldown_minutes': 10              # –°–Ω–∏–∂–µ–Ω–æ —Å 15 –¥–æ 10
            }
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–∞—Ç–æ–≤
        self._load_chat_configuration()
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.SEND_ALERTS_ONLY = os.getenv('SEND_ALERTS_ONLY', 'False').lower() == 'true'
        self.DEFAULT_ALERT_COOLDOWN_MINUTES = int(os.getenv('ALERT_COOLDOWN_MINUTES', '45'))  # –°–Ω–∏–∂–µ–Ω–æ —Å 60
    
    def _load_chat_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤"""
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        file_subscriptions = self.config_manager.load_subscriptions()
        
        # –ó–∞—Ç–µ–º –¥–æ–ø–æ–ª–Ω—è–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_subscriptions = self._load_from_env()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º (—Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        self.CHAT_SUBSCRIPTIONS = {**env_subscriptions, **file_subscriptions}
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.CHAT_SUBSCRIPTIONS)} –ø–æ–¥–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if env_subscriptions and not file_subscriptions:
            self._save_chat_configuration()
    
    def _load_from_env(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        subscriptions = {}
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_chat = os.getenv('TELEGRAM_CHAT_ID', '')
        if admin_chat:
            subscriptions[admin_chat] = {
                'tier': 'VIP',
                'is_admin': True,
                'active': True,
                'signals_sent_today': 0,
                'last_signal_time': None,
                'allowed_features': self.SUBSCRIPTION_TIERS['VIP']['features'],
                'custom_settings': {},
                'source': 'env'
            }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã
        additional_chats_str = os.getenv('TELEGRAM_ADDITIONAL_CHATS', '')
        if additional_chats_str:
            try:
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ JSON, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                if additional_chats_str.startswith('['):
                    additional_chats = json.loads(additional_chats_str)
                else:
                    additional_chats = [chat.strip() for chat in additional_chats_str.split(',') if chat.strip()]
            except json.JSONDecodeError:
                additional_chats = [chat.strip() for chat in additional_chats_str.split(',') if chat.strip()]
            
            for chat in additional_chats:
                if chat not in subscriptions:
                    subscriptions[chat] = {
                        'tier': 'BASIC',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é BASIC –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤
                        'is_admin': False,
                        'active': True,
                        'signals_sent_today': 0,
                        'last_signal_time': None,
                        'allowed_features': self.SUBSCRIPTION_TIERS['BASIC']['features'],
                        'custom_settings': {},
                        'source': 'env'
                    }
        
        # JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
        custom_subscriptions_str = os.getenv('TELEGRAM_SUBSCRIPTIONS', '')
        if custom_subscriptions_str:
            try:
                custom_subscriptions = json.loads(custom_subscriptions_str)
                for chat_id, settings in custom_subscriptions.items():
                    if chat_id in subscriptions:
                        subscriptions[chat_id].update(settings)
                    else:
                        subscriptions[chat_id] = {
                            **settings,
                            'signals_sent_today': 0,
                            'last_signal_time': None,
                            'allowed_features': self.SUBSCRIPTION_TIERS.get(settings.get('tier', 'FREE'), {}).get('features', []),
                            'custom_settings': {},
                            'source': 'env'
                        }
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ TELEGRAM_SUBSCRIPTIONS: {e}")
        
        return subscriptions
    
    def _save_chat_configuration(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        return self.config_manager.save_subscriptions(self.CHAT_SUBSCRIPTIONS)
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ß–ê–¢–ê–ú–ò (—Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º) =====
    
    def add_chat(self, chat_id: str, tier: str = 'FREE', is_admin: bool = False) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        if tier not in self.SUBSCRIPTION_TIERS:
            return False
        
        self.CHAT_SUBSCRIPTIONS[chat_id] = {
            'tier': tier,
            'is_admin': is_admin,
            'active': True,
            'signals_sent_today': 0,
            'last_signal_time': None,
            'allowed_features': self.SUBSCRIPTION_TIERS[tier]['features'],
            'custom_settings': {},
            'added_at': datetime.now().isoformat(),
            'source': 'admin_command'
        }
        
        # –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï
        success = self._save_chat_configuration()
        if success:
            logger.info(f"–ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ç–∞—Ä–∏—Ñ–æ–º {tier} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
        else:
            logger.error(f"–ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª")
        
        return True
    
    def remove_chat(self, chat_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        if chat_id in self.CHAT_SUBSCRIPTIONS:
            del self.CHAT_SUBSCRIPTIONS[chat_id]
            
            # –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï
            success = self._save_chat_configuration()
            if success:
                logger.info(f"–ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                logger.error(f"–ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            
            return True
        return False
    
    def upgrade_chat(self, chat_id: str, new_tier: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        if chat_id not in self.CHAT_SUBSCRIPTIONS:
            return False
        
        if new_tier not in self.SUBSCRIPTION_TIERS:
            return False
        
        self.CHAT_SUBSCRIPTIONS[chat_id]['tier'] = new_tier
        self.CHAT_SUBSCRIPTIONS[chat_id]['allowed_features'] = self.SUBSCRIPTION_TIERS[new_tier]['features']
        self.CHAT_SUBSCRIPTIONS[chat_id]['upgraded_at'] = datetime.now().isoformat()
        
        # –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï
        success = self._save_chat_configuration()
        if success:
            logger.info(f"–¢–∞—Ä–∏—Ñ —á–∞—Ç–∞ {chat_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_tier} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            logger.error(f"–¢–∞—Ä–∏—Ñ —á–∞—Ç–∞ {chat_id} –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        
        return True
    
    def update_chat_signal_count(self, chat_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        if chat_id in self.CHAT_SUBSCRIPTIONS:
            if not self.CHAT_SUBSCRIPTIONS[chat_id].get('is_admin', False):
                self.CHAT_SUBSCRIPTIONS[chat_id]['signals_sent_today'] = \
                    self.CHAT_SUBSCRIPTIONS[chat_id].get('signals_sent_today', 0) + 1
                self.CHAT_SUBSCRIPTIONS[chat_id]['last_signal_time'] = datetime.now().isoformat()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –¥–∏—Å–∫
                signal_count = self.CHAT_SUBSCRIPTIONS[chat_id]['signals_sent_today']
                if signal_count % 5 == 0:
                    self._save_chat_configuration()
    
    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ß–¢–ï–ù–ò–Ø (—É–ª—É—á—à–µ–Ω–Ω—ã–µ) =====
    
    def get_authorized_chats(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        return [chat_id for chat_id, settings in self.CHAT_SUBSCRIPTIONS.items() 
                if settings.get('active', False)]
    
    def get_chat_tier(self, chat_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏ —á–∞—Ç–∞"""
        return self.CHAT_SUBSCRIPTIONS.get(chat_id, {}).get('tier', 'FREE')
    
    def is_chat_authorized(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞"""
        return chat_id in self.CHAT_SUBSCRIPTIONS and \
               self.CHAT_SUBSCRIPTIONS[chat_id].get('active', False)
    
    def can_receive_signal(self, chat_id: str, category: str) -> tuple[bool, str]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —á–∞—Ç–∞"""
        if not self.is_chat_authorized(chat_id):
            return False, "–ß–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        
        chat_settings = self.CHAT_SUBSCRIPTIONS[chat_id]
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –í–°–ï —Å–∏–≥–Ω–∞–ª—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if chat_settings.get('is_admin', False):
            return True, "OK (Admin - unlimited access)"
        
        tier = chat_settings['tier']
        tier_settings = self.SUBSCRIPTION_TIERS.get(tier, self.SUBSCRIPTION_TIERS['FREE'])
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'other' - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è –≤—Å–µ—Ö BASIC+
        if category == 'other':
            if tier in ['VIP', 'PREMIUM', 'BASIC']:  # –î–æ–±–∞–≤–∏–ª–∏ BASIC
                return True, f"OK (Category 'other' allowed for {tier})"
            else:
                return False, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'other' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è BASIC/PREMIUM/VIP"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if category not in tier_settings['categories_allowed']:
            return False, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è '{tier}'"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
        max_signals = tier_settings['max_signals_per_day']
        if max_signals > 0:
            signals_today = chat_settings.get('signals_sent_today', 0)
            if signals_today >= max_signals:
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ ({max_signals})"
        
        return True, "OK"
    
    def get_cooldown_minutes(self, chat_id: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞"""
        if not self.is_chat_authorized(chat_id):
            return self.DEFAULT_ALERT_COOLDOWN_MINUTES
        
        if self.CHAT_SUBSCRIPTIONS[chat_id].get('is_admin', False):
            return 0
        
        tier = self.get_chat_tier(chat_id)
        tier_settings = self.SUBSCRIPTION_TIERS.get(tier, self.SUBSCRIPTION_TIERS['FREE'])
        return tier_settings.get('cooldown_minutes', self.DEFAULT_ALERT_COOLDOWN_MINUTES)

# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò =====

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–∏–∑ config.py)
CANDLESTICK_PATTERNS = {
    'bullish': [
        'hammer', 'inverted_hammer', 'bullish_engulfing', 
        'piercing_line', 'morning_star', 'three_white_soldiers'
    ],
    'bearish': [
        'hanging_man', 'shooting_star', 'bearish_engulfing',
        'dark_cloud_cover', 'evening_star', 'three_black_crows'
    ]
}

# –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
INDICATOR_WEIGHTS = {
    'trend_following': 0.25,    # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (EMA, MACD)
    'momentum': 0.20,           # –ú–æ–º–µ–Ω—Ç—É–º (RSI, Stochastic)
    'volatility': 0.15,         # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (Bollinger Bands)
    'volume': 0.15,             # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    'candlestick': 0.15,        # –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    'support_resistance': 0.10   # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä—ã–Ω–∫–∞
MARKET_CONDITIONS = {
    'trending': {
        'min_trend_strength': 0.6,
        'preferred_indicators': ['MACD', 'EMA', 'ADX']
    },
    'ranging': {
        'max_trend_strength': 0.4,
        'preferred_indicators': ['RSI', 'Stochastic', 'BB']
    },
    'volatile': {
        'min_volatility': 0.02,
        'risk_multiplier': 0.5
    }
}

# –£–õ–£–ß–®–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ä (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
PAIR_SPECIFIC_SETTINGS = {
    # ===== –ú–ï–ú–ö–û–ò–ù–´ - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è =====
    'DOGEUSDT': {
        'max_leverage': 3,
        'min_confidence': 70.0,         # –°–Ω–∏–∂–µ–Ω–æ —Å 80
        'volatility_threshold': 0.15,
        'min_volume_multiplier': 0.8    # –°–Ω–∏–∂–µ–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å
    },
    'SHIBUSDT': {
        'max_leverage': 3,
        'min_confidence': 70.0,         # –°–Ω–∏–∂–µ–Ω–æ —Å 80
        'volatility_threshold': 0.15,
        'min_volume_multiplier': 0.8
    },
    'PEPEUSDT': {
        'max_leverage': 2,
        'min_confidence': 75.0,         # –°–Ω–∏–∂–µ–Ω–æ —Å 85
        'volatility_threshold': 0.20,
        'min_volume_multiplier': 0.7
    },
    '1000PEPEUSDT': {
        'max_leverage': 2,
        'min_confidence': 75.0,
        'volatility_threshold': 0.20,
        'min_volume_multiplier': 0.7
    },
    'FLOKIUSDT': {
        'max_leverage': 3,
        'min_confidence': 70.0,
        'volatility_threshold': 0.18,
        'min_volume_multiplier': 0.8
    },
    
    # ===== DEFI –¢–û–ö–ï–ù–´ - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è =====
    'LINKUSDT': {
        'max_leverage': 5,
        'min_confidence': 65.0,         # –°–Ω–∏–∂–µ–Ω–æ —Å 70
        'volatility_threshold': 0.08,
        'min_volume_multiplier': 0.9
    },
    'AAVEUSDT': {
        'max_leverage': 5,
        'min_confidence': 65.0,
        'volatility_threshold': 0.08,
        'min_volume_multiplier': 0.9
    },
    'UNIUSDT': {
        'max_leverage': 4,
        'min_confidence': 65.0,
        'volatility_threshold': 0.10,
        'min_volume_multiplier': 0.9
    },
    'MKRUSDT': {
        'max_leverage': 4,
        'min_confidence': 68.0,
        'volatility_threshold': 0.12,
        'min_volume_multiplier': 1.0
    },
    
    # ===== –ù–û–í–´–ï –ü–†–û–ï–ö–¢–´ - –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è =====
    'CETUSUSDT': {
        'max_leverage': 2,
        'min_confidence': 75.0,         # –°–Ω–∏–∂–µ–Ω–æ —Å 85
        'volatility_threshold': 0.25,
        'min_volume_multiplier': 1.5    # –°–Ω–∏–∂–µ–Ω–æ —Å 2.0
    },
    'SLERFUSDT': {
        'max_leverage': 2,
        'min_confidence': 75.0,
        'volatility_threshold': 0.25,
        'min_volume_multiplier': 1.5
    },
    'SXTUSDT': {
        'max_leverage': 3,
        'min_confidence': 70.0,
        'volatility_threshold': 0.20,
        'min_volume_multiplier': 1.2
    },
    'TIAUSDT': {
        'max_leverage': 4,
        'min_confidence': 68.0,
        'volatility_threshold': 0.15,
        'min_volume_multiplier': 1.0
    },
    
    # ===== GAMING/NFT –¢–û–ö–ï–ù–´ =====
    'APEUSDT': {
        'max_leverage': 3,
        'min_confidence': 68.0,
        'volatility_threshold': 0.15,
        'min_volume_multiplier': 0.9
    },
    'SANDUSDT': {
        'max_leverage': 4,
        'min_confidence': 65.0,
        'volatility_threshold': 0.12,
        'min_volume_multiplier': 0.9
    },
    'MANAUSDT': {
        'max_leverage': 4,
        'min_confidence': 65.0,
        'volatility_threshold': 0.12,
        'min_volume_multiplier': 0.9
    },
    
    # ===== LAYER 1 –ë–õ–û–ö–ß–ï–ô–ù–´ =====
    'AVAXUSDT': {
        'max_leverage': 5,
        'min_confidence': 62.0,
        'volatility_threshold': 0.10,
        'min_volume_multiplier': 0.8
    },
    'DOTUSDT': {
        'max_leverage': 5,
        'min_confidence': 62.0,
        'volatility_threshold': 0.10,
        'min_volume_multiplier': 0.8
    },
    'MATICUSDT': {
        'max_leverage': 5,
        'min_confidence': 60.0,
        'volatility_threshold': 0.08,
        'min_volume_multiplier': 0.7
    },
    'ATOMUSDT': {
        'max_leverage': 4,
        'min_confidence': 65.0,
        'volatility_threshold': 0.12,
        'min_volume_multiplier': 0.9
    },
    'NEARUSDT': {
        'max_leverage': 4,
        'min_confidence': 65.0,
        'volatility_threshold': 0.12,
        'min_volume_multiplier': 0.9
    },
    'APTUSDT': {
        'max_leverage': 4,
        'min_confidence': 68.0,
        'volatility_threshold': 0.15,
        'min_volume_multiplier': 1.0
    },
    'SUIUSDT': {
        'max_leverage': 4,
        'min_confidence': 68.0,
        'volatility_threshold': 0.15,
        'min_volume_multiplier': 1.0
    }
}

# ===== UTILITY –§–£–ù–ö–¶–ò–ò =====

def get_test_mode_status() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    return os.getenv('TEST_MODE', 'False').lower() == 'true'

def log_config_status():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    test_mode = get_test_mode_status()
    
    if test_mode:
        logger.info("üß™ ENHANCED CONFIG: –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
        logger.info("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 45%")
        logger.info("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã —Å–Ω–∏–∂–µ–Ω—ã –≤ 10 —Ä–∞–∑")
        logger.info("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: 3%")
    else:
        logger.info("üéØ ENHANCED CONFIG: –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º")
        logger.info("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 70%")
        logger.info("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–º—ã (—Å–Ω–∏–∂–µ–Ω—ã –≤ 2 —Ä–∞–∑–∞)")
        logger.info("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: 2%")

