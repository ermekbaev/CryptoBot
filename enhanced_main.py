#!/usr/bin/env python3
# enhanced_main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

import asyncio
import logging
import sys
import signal
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List
import traceback
import aiohttp
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

from persistent_config_system import EnhancedTradingConfig as TradingConfig
from bybit_api import BybitAPI
from signal_generator import SignalGenerator
from enhanced_telegram_bot import EnhancedTelegramBot
from simple_tp_tracker import SimpleTakeProfitTracker


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class TelegramPolling:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram —á–µ—Ä–µ–∑ polling"""
    
    def __init__(self, bot_token: str, message_handler):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.message_handler = message_handler
        self.offset = 0
        self.is_running = False
        
        
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.is_running = True
        logger.info("üì° –ó–∞–ø—É—Å–∫ Telegram polling...")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
                updates = await self._get_updates()
                
                if updates:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    for update in updates:
                        try:
                            await self._process_update(update)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º offset
                        self.offset = update.get('update_id', 0) + 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
                await asyncio.sleep(5)
    
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        self.is_running = False
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram polling...")
    
    async def _get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram API"""
        try:
            url = f"{self.base_url}/getUpdates"
            params = {
                'offset': self.offset,
                'timeout': 10,
                'allowed_updates': ['message']
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=15) as response: # type: ignore
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return data.get('result', [])
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {response.status}")
                        
        except asyncio.TimeoutError:
            # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è long polling
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        
        return []
    
    async def _process_update(self, update: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            message = update.get('message')
            if not message:
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '')
            username = message.get('from', {}).get('username', 'Unknown')
            
            logger.info(f"üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} (ID: {chat_id}): {text}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await self.message_handler(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

class EnhancedTradingBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    
    def __init__(self):
        self.config = TradingConfig()
        self.bybit_api = BybitAPI(self.config) # type: ignore
        self.signal_generator = SignalGenerator(self.config) # type: ignore
        self.telegram_bot = EnhancedTelegramBot(self.config) # type: ignore
        self.is_running = False
        self.last_analysis_time = {}
        self.tp_tracker = SimpleTakeProfitTracker(self.config, self.bybit_api)
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è polling
        self.telegram_polling = TelegramPolling(
            self.config.TELEGRAM_BOT_TOKEN,
            self.handle_telegram_message
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.daily_stats = {
            'signals_generated': 0,
            'signals_sent': 0,
            'analysis_cycles': 0,
            'errors': 0,
            'messages_received': 0,  # –î–û–ë–ê–í–õ–ï–ù–û
            'commands_processed': 0,   # –î–û–ë–ê–í–õ–ï–ù–û
            'tp_tracking_started': 0
        }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not await self._validate_configuration():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not await self._validate_connections():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º")
            return
        
        try:
            self.tp_tracker.load_results()
            await self.tp_tracker.start_tracking()
            logger.info("üìä TP —Ç—Ä–µ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TP —Ç—Ä–µ–∫–µ—Ä–∞: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await self.telegram_bot.send_alert(
            f"üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.config.TRADING_PAIRS)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä\nüë• –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {len(self.config.get_authorized_chats())} —á–∞—Ç–æ–≤\n\nüí¨ –¢–µ–ø–µ—Ä—å –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã!",
            "SUCCESS"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
        await self._send_startup_info()
        
        self.is_running = True
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º polling –∏ –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                self.telegram_polling.start_polling(),  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                self._analysis_loop()                    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            )
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await self.telegram_bot.send_alert(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}", "ERROR", admin_only=True)
        finally:
            await self.stop()
    
    async def _analysis_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
        while self.is_running:
            try:
                await self._analysis_cycle()
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                await asyncio.sleep(10)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
        await self.telegram_polling.stop_polling()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP —Ç—Ä–µ–∫–µ—Ä
        try:
            await self.tp_tracker.stop_tracking()
            logger.info("üìä TP —Ç—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TP —Ç—Ä–µ–∫–µ—Ä–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
        stats_message = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ—Å—Å–∏—é:
üîÑ –¶–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {self.daily_stats['analysis_cycles']}
üìà –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {self.daily_stats['signals_generated']}
üì§ –°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.daily_stats['signals_sent']}
üìä TP –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π: {self.daily_stats['tp_tracking_started']}
üì± –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {self.daily_stats['messages_received']}
‚å®Ô∏è –ö–æ–º–∞–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.daily_stats['commands_processed']}
‚ùå –û—à–∏–±–æ–∫: {self.daily_stats['errors']}"""
        
        await self.telegram_bot.send_alert(f"‚èπÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n{stats_message}", "WARNING")
    
    # –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
    async def handle_telegram_message(self, message: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            self.daily_stats['messages_received'] += 1
            
            chat_id = str(message.get('chat', {}).get('id', ''))
            text = message.get('text', '').strip()
            
            if not chat_id or not text:
                logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ chat_id")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if text.startswith('/'):
                self.daily_stats['commands_processed'] += 1
                
                parts = text[1:].split()
                command = parts[0].lower()
                args = parts[1:] if len(parts) > 1 else []
                
                logger.info(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /{command} –æ—Ç {chat_id}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ TP —Ç—Ä–µ–∫–µ—Ä–∞
                if command == 'tp_stats':
                    await self._handle_tp_stats_command(chat_id)
                    return
                elif command == 'tp_active':
                    await self._handle_tp_active_command(chat_id)
                    return
                
                await self.telegram_bot.handle_command(chat_id, command, args)

                
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTC" –∏–ª–∏ "–∞–Ω–∞–ª–∏–∑ ETHUSDT")
            elif text.upper() in self.config.TRADING_PAIRS:
                symbol = text.upper()
                if self.config.is_chat_authorized(chat_id):
                    await self.send_manual_analysis(symbol, chat_id)
                else:
                    await self.telegram_bot.send_subscription_info(chat_id)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            elif any(symbol in text.upper() for symbol in self.config.TRADING_PAIRS):
                # –ò—â–µ–º —Å–∏–º–≤–æ–ª –≤ —Ç–µ–∫—Å—Ç–µ
                for symbol in self.config.TRADING_PAIRS:
                    if symbol in text.upper():
                        if self.config.is_chat_authorized(chat_id):
                            await self.send_manual_analysis(symbol, chat_id)
                        else:
                            await self.telegram_bot.send_subscription_info(chat_id)
                        break
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥—É
            elif not self.config.is_chat_authorized(chat_id):
                await self.telegram_bot.send_subscription_info(chat_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.daily_stats['errors'] += 1
    
    async def _validate_configuration(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        if not self.config.BYBIT_API_KEY or not self.config.BYBIT_SECRET_KEY:
            logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã API –∫–ª—é—á–∏ Bybit")
            return False
        
        if not self.config.TELEGRAM_BOT_TOKEN:
            logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç–æ–≤
        authorized_chats = self.config.get_authorized_chats()
        if not authorized_chats:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ - –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(authorized_chats)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö
            for chat_id in authorized_chats:
                tier = self.config.get_chat_tier(chat_id)
                is_admin = self.config.CHAT_SUBSCRIPTIONS.get(chat_id, {}).get('is_admin', False)
                admin_mark = " (–ê–¥–º–∏–Ω)" if is_admin else ""
                logger.info(f"  üì± –ß–∞—Ç {chat_id}: {tier}{admin_mark}")
        
        logger.info(f"‚úÖ –ë—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è {len(self.config.TRADING_PAIRS)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        return True
    
    async def _validate_connections(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit API
        try:
            if not self.bybit_api.validate_connection():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit API")
                return False
            logger.info("‚úÖ Bybit API –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Bybit API: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram
        try:
            if not await self.telegram_bot.test_connection():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return False
            logger.info("‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
            return False
        
        return True
    
    async def _send_startup_info(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ –≤ —á–∞—Ç—ã"""
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_chats = [chat_id for chat_id, settings in self.config.CHAT_SUBSCRIPTIONS.items()
                          if settings.get('is_admin', False)]
            
            if admin_chats:
                admin_message = f"""üëë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>

ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> –ó–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üìä <b>–¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:</b> {len(self.config.TRADING_PAIRS)}
üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:</b> {len(self.config.get_authorized_chats())}
üí¨ <b>–ü—Ä–∏–µ–º –∫–æ–º–∞–Ω–¥:</b> –í–∫–ª—é—á–µ–Ω

üíé <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º:</b>"""
                
                tier_counts = {}
                for settings in self.config.CHAT_SUBSCRIPTIONS.values():
                    tier = settings.get('tier', 'FREE')
                    tier_counts[tier] = tier_counts.get(tier, 0) + 1
                
                for tier, count in tier_counts.items():
                    admin_message += f"\n‚Ä¢ {tier}: {count} —á–∞—Ç–æ–≤"
                
                admin_message += f"""

üîß <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/admin help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/admin list_chats - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
/admin add_chat [chat_id] [tier] - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
/admin test_bot - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã

üí° <b>–¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç!</b>"""
                
                for admin_chat in admin_chats:
                    await self.telegram_bot._send_message(admin_message, admin_chat)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    async def _analysis_cycle(self):
        """–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        cycle_start = datetime.now()
        
        try:
            logger.info("üîç –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")
            self.daily_stats['analysis_cycles'] += 1
            
            # –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
            if self.daily_stats['analysis_cycles'] % 10 == 0:
                test_message = f"""ü§ñ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>

üìä –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞: #{self.daily_stats['analysis_cycles']}
üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.daily_stats['messages_received']}
‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {self.daily_stats['commands_processed']}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin help"""
                
                await self.telegram_bot.send_alert(test_message, "INFO", admin_only=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            account_data = self.bybit_api.get_account_balance()
            balance = self._extract_usdt_balance(account_data)
            
            if balance <= 0:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞")
                balance = 1000.0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
            signals_generated = 0
            signals_sent = 0
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
            for symbol in self.config.TRADING_PAIRS:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –ø–∞—Ä—É
                    if not self._should_analyze_symbol(symbol):
                        continue
                    
                    logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ {symbol}...")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    market_data = await self._collect_market_data(symbol)
                    
                    if not market_data:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                        continue
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                    signal = self.signal_generator.generate_signal(symbol, market_data, balance)
                    
                    if signal:
                        signals_generated += 1
                        self.daily_stats['signals_generated'] += 1
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∞—Ä—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
                        signal.category = self._get_pair_category(symbol) # type: ignore
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤–æ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∞—Ç—ã
                        send_results = await self.telegram_bot.send_trading_signal(signal) # type: ignore
                        
                        successful_sends = sum(send_results.values())
                        if successful_sends > 0:
                            signals_sent += successful_sends
                            self.daily_stats['signals_sent'] += successful_sends
                            try:
                                signal_id = self.tp_tracker.add_signal_for_tracking(signal)
                                if signal_id:
                                    self.daily_stats['tp_tracking_started'] += 1
                                    logger.info(f"üìä –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ TP –¥–ª—è {signal_id}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è TP –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
                            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {signal.signal_type} –¥–ª—è {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {successful_sends} —á–∞—Ç–æ–≤")
                        else:
                            logger.warning(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    self.last_analysis_time[symbol] = datetime.now()
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                    self.daily_stats['errors'] += 1
                    continue
            
            cycle_duration = (datetime.now() - cycle_start).total_seconds()
            
            logger.info(f"‚úÖ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.1f}—Å. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_generated}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {signals_sent}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É (–∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤)
            if self.daily_stats['analysis_cycles'] % 10 == 0:
                await self._send_periodic_summary()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            logger.error(traceback.format_exc())
            self.daily_stats['errors'] += 1
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async def _collect_market_data(self, symbol: str) -> Dict:
        """–°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            market_data = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–µ—á–∏)
            klines = self.bybit_api.get_klines(symbol, self.config.PRIMARY_TIMEFRAME, 200)
            if not klines.empty:
                market_data['klines'] = klines
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞
            ticker = self.bybit_api.get_ticker_24hr(symbol)
            if ticker:
                market_data['ticker'] = ticker
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            funding = self.bybit_api.get_funding_rate(symbol)
            if funding:
                market_data['funding'] = funding
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
            oi_data = self.bybit_api.get_open_interest(symbol, '1h', 48)
            if not oi_data.empty:
                market_data['open_interest'] = oi_data
            
            return market_data if market_data else None # type: ignore
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None # type: ignore
    
    def _extract_usdt_balance(self, account_data: Dict) -> float:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ USDT –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if not account_data or 'list' not in account_data:
                return 0.0
            
            for account in account_data['list']:
                if account.get('accountType') == 'UNIFIED':
                    coins = account.get('coin', [])
                    for coin in coins:
                        if coin.get('coin') == 'USDT':
                            return float(coin.get('walletBalance', 0))
            
            return 0.0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0
    
    def _should_analyze_symbol(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        last_analysis = self.last_analysis_time.get(symbol)
        
        if last_analysis:
            time_since_last = datetime.now() - last_analysis
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            if time_since_last < timedelta(minutes=15):
                return False
        
        return True
    
    def _get_pair_category(self, symbol: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        for category, pairs in self.config.PAIR_CATEGORIES.items():
            if symbol in pairs:
                return category
        return 'other'
    
    async def _send_periodic_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            summary = f"""üìä <b>–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞</b>

üîÑ –¶–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {self.daily_stats['analysis_cycles']}
üìà –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {self.daily_stats['signals_generated']}
üì§ –°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.daily_stats['signals_sent']}
üì± –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {self.daily_stats['messages_received']}
‚å®Ô∏è –ö–æ–º–∞–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.daily_stats['commands_processed']}
‚ùå –û—à–∏–±–æ–∫: {self.daily_stats['errors']}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            await self.telegram_bot.send_alert(summary, "INFO", admin_only=True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏: {e}")
    
    async def send_manual_analysis(self, symbol: str, chat_id: str = None): # type: ignore
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        try:
            logger.info(f"üîç –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ {symbol}...")
            
            market_data = await self._collect_market_data(symbol)
            
            if not market_data:
                message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}"
                if chat_id:
                    await self.telegram_bot._send_message(message, chat_id)
                else:
                    await self.telegram_bot.send_alert(message, "ERROR", admin_only=True)
                return
            
            # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
            from technical_analysis import TechnicalAnalyzer
            from fundamental_analysis import FundamentalAnalyzer
            
            tech_analyzer = TechnicalAnalyzer(self.config) # type: ignore
            fund_analyzer = FundamentalAnalyzer(self.config) # type: ignore
            
            tech_result = tech_analyzer.analyze(
                market_data['klines'], symbol, self.config.PRIMARY_TIMEFRAME
            )
            
            fund_result = fund_analyzer.analyze(
                symbol, 
                market_data.get('ticker', {}),
                market_data.get('funding', {}),
                market_data.get('open_interest', pd.DataFrame())
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
            if chat_id:
                # –í –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
                message = self.telegram_bot._format_analysis_message(
                    symbol, tech_result, fund_result, chat_id
                )
                await self.telegram_bot._send_message(message, chat_id)
            else:
                # –í–æ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∞—Ç—ã
                await self.telegram_bot.send_market_analysis(symbol, tech_result, fund_result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}"
            if chat_id:
                await self.telegram_bot._send_message(error_message, chat_id)
            else:
                await self.telegram_bot.send_alert(error_message, "ERROR", admin_only=True)

    async def _handle_tp_stats_command(self, chat_id: str):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tp_stats"""
            try:
                if not self.config.is_chat_authorized(chat_id):
                    await self.telegram_bot.send_subscription_info(chat_id)
                    return
                
                stats_message = self.tp_tracker.format_statistics_message()
                await self.telegram_bot._send_message(stats_message, chat_id)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /tp_stats: {e}")
                await self.telegram_bot._send_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TP", chat_id)
        
    async def _handle_tp_active_command(self, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tp_active"""
        try:
            if not self.config.is_chat_authorized(chat_id):
                await self.telegram_bot.send_subscription_info(chat_id)
                return
            
            active_signals = self.tp_tracker.tracking_signals
            
            if not active_signals:
                message = "üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TP</b>\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π"
            else:
                message = f"üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TP</b>\n\nüëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(active_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
                
                for signal_id, signal_data in list(active_signals.items())[:5]:
                    elapsed = datetime.now() - signal_data.start_time
                    elapsed_str = self._format_duration(elapsed)
                    message += f"‚Ä¢ {signal_data.symbol} {signal_data.signal_type} - {elapsed_str}\n"
                
                if len(active_signals) > 5:
                    message += f"... –∏ –µ—â–µ {len(active_signals) - 5} —Å–∏–≥–Ω–∞–ª–æ–≤"
            
            await self.telegram_bot._send_message(message, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /tp_active: {e}")
            await self.telegram_bot._send_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π", chat_id)
    
    def _format_duration(self, duration):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        total_seconds = int(duration.total_seconds())
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        
        if hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º"

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = EnhancedTradingBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(traceback.format_exc())
    finally:
        await bot.stop()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config = TradingConfig()
    
    if not config.BYBIT_API_KEY or not config.BYBIT_SECRET_KEY:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω—ã API –∫–ª—é—á–∏ Bybit")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
        print("BYBIT_SECRET_KEY=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
        sys.exit(1)
    
    if not config.TELEGRAM_BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
        print("–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç–æ–≤
    authorized_chats = config.get_authorized_chats()
    if not authorized_chats:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —á–∞—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("TELEGRAM_CHAT_ID=–≤–∞—à_chat_id")
        print("–∏–ª–∏")
        print("TELEGRAM_ADDITIONAL_CHATS=chat1,chat2,chat3")
        
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤? (y/N): ")
        if response.lower() != 'y':
            sys.exit(1)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    print(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(config.TRADING_PAIRS)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    print(f"üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {len(authorized_chats)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")
    print(f"üí¨ –†–µ–∂–∏–º: Polling (–ø—Ä–∏–µ–º –∫–æ–º–∞–Ω–¥ –≤–∫–ª—é—á–µ–Ω)")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("‚èπÔ∏è –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)